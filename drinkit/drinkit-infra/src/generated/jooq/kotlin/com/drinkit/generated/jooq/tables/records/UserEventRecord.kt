/*
 * This file is generated by jOOQ.
 */
package com.drinkit.generated.jooq.tables.records


import com.drinkit.generated.jooq.tables.UserEvent

import java.time.OffsetDateTime

import org.jooq.JSONB
import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class UserEventRecord private constructor() : UpdatableRecordImpl<UserEventRecord>(UserEvent.USER_EVENT) {

    open var userId: String
        set(value): Unit = set(0, value)
        get(): String = get(0) as String

    open var sequenceId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    open var eventName: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var date: OffsetDateTime
        set(value): Unit = set(3, value)
        get(): OffsetDateTime = get(3) as OffsetDateTime

    open var author: JSONB
        set(value): Unit = set(4, value)
        get(): JSONB = get(4) as JSONB

    open var payload: JSONB
        set(value): Unit = set(5, value)
        get(): JSONB = get(5) as JSONB

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, Long?> = super.key() as Record2<String?, Long?>

    /**
     * Create a detached, initialised UserEventRecord
     */
    constructor(userId: String, sequenceId: Long, eventName: String, date: OffsetDateTime, author: JSONB, payload: JSONB): this() {
        this.userId = userId
        this.sequenceId = sequenceId
        this.eventName = eventName
        this.date = date
        this.author = author
        this.payload = payload
        resetTouchedOnNotNull()
    }
}
