/*
 * This file is generated by jOOQ.
 */
package com.drinkit.generated.jooq.tables.records


import com.drinkit.generated.jooq.tables.ExchangeRate

import java.math.BigDecimal
import java.time.OffsetDateTime

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ExchangeRateRecord private constructor() : UpdatableRecordImpl<ExchangeRateRecord>(ExchangeRate.EXCHANGE_RATE) {

    open var sourceCurrency: String
        set(value): Unit = set(0, value)
        get(): String = get(0) as String

    open var targetCurrency: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var rate: BigDecimal
        set(value): Unit = set(2, value)
        get(): BigDecimal = get(2) as BigDecimal

    open var modified: OffsetDateTime
        set(value): Unit = set(3, value)
        get(): OffsetDateTime = get(3) as OffsetDateTime

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, String?> = super.key() as Record2<String?, String?>

    /**
     * Create a detached, initialised ExchangeRateRecord
     */
    constructor(sourceCurrency: String, targetCurrency: String, rate: BigDecimal, modified: OffsetDateTime): this() {
        this.sourceCurrency = sourceCurrency
        this.targetCurrency = targetCurrency
        this.rate = rate
        this.modified = modified
        resetTouchedOnNotNull()
    }
}
