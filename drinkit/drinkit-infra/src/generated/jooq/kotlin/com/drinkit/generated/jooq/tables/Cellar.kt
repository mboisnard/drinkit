/*
 * This file is generated by jOOQ.
 */
package com.drinkit.generated.jooq.tables


import com.drinkit.generated.jooq.DrinkitApplication
import com.drinkit.generated.jooq.indexes.CELLAR_OWNER_ID_IDX
import com.drinkit.generated.jooq.keys.CELLAR_PKEY
import com.drinkit.generated.jooq.tables.records.CellarRecord

import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Cellar(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, CellarRecord>?,
    parentPath: InverseForeignKey<out Record, CellarRecord>?,
    aliased: Table<CellarRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<CellarRecord>(
    alias,
    DrinkitApplication.DRINKIT_APPLICATION,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>drinkit_application.cellar</code>
         */
        val CELLAR: Cellar = Cellar()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CellarRecord> = CellarRecord::class.java

    /**
     * The column <code>drinkit_application.cellar.id</code>.
     */
    val ID: TableField<CellarRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(24).nullable(false), this, "")

    /**
     * The column <code>drinkit_application.cellar.owner_id</code>.
     */
    val OWNER_ID: TableField<CellarRecord, String?> = createField(DSL.name("owner_id"), SQLDataType.VARCHAR(24).nullable(false), this, "")

    /**
     * The column <code>drinkit_application.cellar.name</code>.
     */
    val NAME: TableField<CellarRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>drinkit_application.cellar.location</code>.
     */
    val LOCATION: TableField<CellarRecord, JSONB?> = createField(DSL.name("location"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>drinkit_application.cellar.rooms</code>.
     */
    val ROOMS: TableField<CellarRecord, JSONB?> = createField(DSL.name("rooms"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>drinkit_application.cellar.modified</code>.
     */
    val MODIFIED: TableField<CellarRecord, LocalDateTime?> = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<CellarRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<CellarRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<CellarRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>drinkit_application.cellar</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>drinkit_application.cellar</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>drinkit_application.cellar</code> table reference
     */
    constructor(): this(DSL.name("cellar"), null)
    override fun getSchema(): Schema? = if (aliased()) null else DrinkitApplication.DRINKIT_APPLICATION
    override fun getIndexes(): List<Index> = listOf(CELLAR_OWNER_ID_IDX)
    override fun getPrimaryKey(): UniqueKey<CellarRecord> = CELLAR_PKEY
    override fun `as`(alias: String): Cellar = Cellar(DSL.name(alias), this)
    override fun `as`(alias: Name): Cellar = Cellar(alias, this)
    override fun `as`(alias: Table<*>): Cellar = Cellar(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Cellar = Cellar(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Cellar = Cellar(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Cellar = Cellar(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Cellar = Cellar(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Cellar = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Cellar = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Cellar = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Cellar = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Cellar = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Cellar = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Cellar = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Cellar = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Cellar = where(DSL.notExists(select))
}
